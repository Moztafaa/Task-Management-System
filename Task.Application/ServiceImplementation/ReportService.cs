using System;
using System.Text;
using Task.Application.DTO;
using Task.Application.ServiveInterface;
using Task.Domain.Entities;
using Task.Domain.RepositoryInterface;

namespace Task.Application.ServiceImplementation;

public class ReportService(ITaskRepository taskRepository, IUserRepository userRepository) : IReportService
{

    public TaskStatusReportDto GenerateStatusReport()
    {
        var totalTasks = taskRepository.GetAll()?.Count() ?? 0;
        var pendingTasks = taskRepository.GetTaskCountByStatus(Domain.Entities.TaskStatus.Pending);
        var inProgressTasks = taskRepository.GetTaskCountByStatus(Domain.Entities.TaskStatus.InProgress);
        var completedTasks = taskRepository.GetTaskCountByStatus(Domain.Entities.TaskStatus.Completed);

        return CreateStatusReport(totalTasks, pendingTasks, inProgressTasks, completedTasks, "All Users");
    }

    public TaskStatusReportDto GenerateStatusReportForUser(Guid userId)
    {
        var user = userRepository.GetById(userId);
        var userTasks = taskRepository.GetAll()?.Where(t => t.UserId == userId) ?? Enumerable.Empty<TaskItem>();

        var totalTasks = userTasks.Count();
        var pendingTasks = taskRepository.GetTaskCountByStatusForUser(Domain.Entities.TaskStatus.Pending, userId);
        var inProgressTasks = taskRepository.GetTaskCountByStatusForUser(Domain.Entities.TaskStatus.InProgress, userId);
        var completedTasks = taskRepository.GetTaskCountByStatusForUser(Domain.Entities.TaskStatus.Completed, userId);

        return CreateStatusReport(totalTasks, pendingTasks, inProgressTasks, completedTasks, user?.Username ?? "Unknown User");
    }

    public TaskStatusReportDto GenerateStatusReportForDateRange(DateTime startDate, DateTime endDate)
    {
        var allTasks = taskRepository.GetAll()?.Where(t => t.CreatedAt >= startDate && t.CreatedAt <= endDate) ?? Enumerable.Empty<TaskItem>();

        var totalTasks = allTasks.Count();
        var pendingTasks = taskRepository.GetTaskCountByStatusForDateRange(Domain.Entities.TaskStatus.Pending, startDate, endDate);
        var inProgressTasks = taskRepository.GetTaskCountByStatusForDateRange(Domain.Entities.TaskStatus.InProgress, startDate, endDate);
        var completedTasks = taskRepository.GetTaskCountByStatusForDateRange(Domain.Entities.TaskStatus.Completed, startDate, endDate);

        return CreateStatusReport(totalTasks, pendingTasks, inProgressTasks, completedTasks, $"Date Range: {startDate:yyyy-MM-dd} to {endDate:yyyy-MM-dd}");
    }

    public DetailedTaskReportDto GenerateDetailedReport()
    {
        var statusReport = GenerateStatusReport();

        return new DetailedTaskReportDto
        {
            StatusSummary = statusReport,
            PriorityBreakdown = GeneratePriorityBreakdown(),
            OverdueTasks = taskRepository.GetOverdueTasks().ToList(),
            UpcomingTasks = taskRepository.GetUpcomingTasks().ToList(),
            AverageCompletionTime = CalculateAverageCompletionTime()
        };
    }

    public DetailedTaskReportDto GenerateDetailedReportForUser(Guid userId)
    {
        var statusReport = GenerateStatusReportForUser(userId);

        return new DetailedTaskReportDto
        {
            StatusSummary = statusReport,
            PriorityBreakdown = GeneratePriorityBreakdownForUser(userId),
            OverdueTasks = taskRepository.GetOverdueTasksForUser(userId).ToList(),
            UpcomingTasks = taskRepository.GetUpcomingTasksForUser(userId).ToList(),
            AverageCompletionTime = CalculateAverageCompletionTimeForUser(userId)
        };
    }

    public string ExportReportToText(TaskStatusReportDto report)
    {
        var sb = new StringBuilder();
        sb.AppendLine($"Task Status Report");
        sb.AppendLine($"Generated: {report.GeneratedAt}");
        sb.AppendLine($"Generated By: {report.GeneratedBy}");
        sb.AppendLine(new string('=', 50));
        sb.AppendLine($"Total Tasks: {report.TotalTasks}");
        sb.AppendLine($"Pending: {report.PendingTasks}");
        sb.AppendLine($"In Progress: {report.InProgressTasks}");
        sb.AppendLine($"Completed: {report.CompletedTasks}");
        sb.AppendLine($"Completion Rate: {report.CompletionPercentage:F1}%");
        sb.AppendLine();

        foreach (var breakdown in report.StatusBreakdown)
        {
            sb.AppendLine($"{breakdown.Status}: {breakdown.Count} ({breakdown.Percentage:F1}%)");
        }

        return sb.ToString();
    }

    public string ExportReportToCsv(TaskStatusReportDto report)
    {
        var sb = new StringBuilder();
        sb.AppendLine("Status,Count,Percentage");

        foreach (var breakdown in report.StatusBreakdown)
        {
            sb.AppendLine($"{breakdown.Status},{breakdown.Count},{breakdown.Percentage:F1}");
        }

        return sb.ToString();
    }

    private TaskStatusReportDto CreateStatusReport(int total, int pending, int inProgress, int completed, string generatedBy)
    {
        var completionPercentage = total > 0 ? (double)completed / total * 100 : 0;

        var report = new TaskStatusReportDto
        {
            TotalTasks = total,
            PendingTasks = pending,
            InProgressTasks = inProgress,
            CompletedTasks = completed,
            CompletionPercentage = completionPercentage,
            GeneratedAt = DateTime.UtcNow,
            GeneratedBy = generatedBy
        };

        // Add breakdown
        if (total > 0)
        {
            report.StatusBreakdown = new List<TaskStatusBreakdownDto>
            {
                new() { Status = Domain.Entities.TaskStatus.Pending, Count = pending, Percentage = (double)pending / total * 100, Tasks = taskRepository.GetTasksByStatus(Domain.Entities.TaskStatus.Pending).ToList() },
                new() { Status = Domain.Entities.TaskStatus.InProgress, Count = inProgress, Percentage = (double)inProgress / total * 100, Tasks = taskRepository.GetTasksByStatus(Domain.Entities.TaskStatus.InProgress).ToList() },
                new() { Status = Domain.Entities.TaskStatus.Completed, Count = completed, Percentage = (double)completed / total * 100, Tasks = taskRepository.GetTasksByStatus(Domain.Entities.TaskStatus.Completed).ToList() }
            };
        }

        return report;
    }

    private List<TaskPriorityReportDto> GeneratePriorityBreakdown()
    {
        var priorities = Enum.GetValues<TaskPriority>();
        var breakdown = new List<TaskPriorityReportDto>();

        foreach (var priority in priorities)
        {
            var allTasks = taskRepository.GetAll()?.Where(t => t.Priority == priority) ?? Enumerable.Empty<TaskItem>();
            var totalCount = allTasks.Count();
            var pendingCount = allTasks.Count(t => t.Status == Domain.Entities.TaskStatus.Pending);
            var inProgressCount = allTasks.Count(t => t.Status == Domain.Entities.TaskStatus.InProgress);
            var completedCount = allTasks.Count(t => t.Status == Domain.Entities.TaskStatus.Completed);
            var completionRate = totalCount > 0 ? (double)completedCount / totalCount * 100 : 0;

            breakdown.Add(new TaskPriorityReportDto
            {
                Priority = priority,
                TotalCount = totalCount,
                PendingCount = pendingCount,
                InProgressCount = inProgressCount,
                CompletedCount = completedCount,
                CompletionRate = completionRate
            });
        }

        return breakdown;
    }

    private List<TaskPriorityReportDto> GeneratePriorityBreakdownForUser(Guid userId)
    {
        var priorities = Enum.GetValues<TaskPriority>();
        var breakdown = new List<TaskPriorityReportDto>();

        foreach (var priority in priorities)
        {
            var userTasks = taskRepository.GetAll()?.Where(t => t.UserId == userId && t.Priority == priority) ?? Enumerable.Empty<TaskItem>();
            var totalCount = userTasks.Count();
            var pendingCount = userTasks.Count(t => t.Status == Domain.Entities.TaskStatus.Pending);
            var inProgressCount = userTasks.Count(t => t.Status == Domain.Entities.TaskStatus.InProgress);
            var completedCount = userTasks.Count(t => t.Status == Domain.Entities.TaskStatus.Completed);
            var completionRate = totalCount > 0 ? (double)completedCount / totalCount * 100 : 0;

            breakdown.Add(new TaskPriorityReportDto
            {
                Priority = priority,
                TotalCount = totalCount,
                PendingCount = pendingCount,
                InProgressCount = inProgressCount,
                CompletedCount = completedCount,
                CompletionRate = completionRate
            });
        }

        return breakdown;
    }

    private TimeSpan CalculateAverageCompletionTime()
    {
        var completedTasks = taskRepository.GetCompletedTasksWithDuration();
        var completionTimes = new List<TimeSpan>();

        foreach (var task in completedTasks)
        {
            // Assuming we track completion time somehow (you might need to add a CompletedAt field)
            // For now, use a placeholder calculation
            var completionTime = DateTime.UtcNow - task.CreatedAt;
            completionTimes.Add(completionTime);
        }

        if (completionTimes.Count == 0)
            return TimeSpan.Zero;

        var averageTicks = (long)completionTimes.Average(t => t.Ticks);
        return new TimeSpan(averageTicks);
    }

    private TimeSpan CalculateAverageCompletionTimeForUser(Guid userId)
    {
        var completedTasks = taskRepository.GetCompletedTasksWithDurationForUser(userId);
        var completionTimes = new List<TimeSpan>();

        foreach (var task in completedTasks)
        {
            var completionTime = DateTime.UtcNow - task.CreatedAt;
            completionTimes.Add(completionTime);
        }

        if (completionTimes.Count == 0)
            return TimeSpan.Zero;

        var averageTicks = (long)completionTimes.Average(t => t.Ticks);
        return new TimeSpan(averageTicks);
    }
}

